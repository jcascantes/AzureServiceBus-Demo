@page "/"
@using SBSender.Services;
@using SBShared.Models
@inject IQueueService queue
@inject ITopicService topic
@inject IConfiguration config

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>


<EditForm Model="@person" OnValidSubmit="PublishPerson">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="person.FirstName" />
        <label for="lastName">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="person.LastName" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<EditForm Model="@order" OnValidSubmit="PublishOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="orderId">Order id</label>
        <InputText id="orderId" class="form-control" @bind-Value="order.OrderId" />
        <label for="orderAmount">Amount</label>
        <InputText id="orderAmount" class="form-control" @bind-Value="order.Amount" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code{
    PersonModel person = new();
    OrderModel order = new();

    async Task PublishPerson()
    {
        await queue.SendMessageAsync(person, "examplequeue");

        await topic.SendMessageAsync(person, config.GetValue<string>("TopicName"));
        person = new PersonModel();
    }

    async Task PublishOrder()
    {
        await queue.SendMessageAsync(order, "examplequeue");

        await topic.SendMessageAsync(order, config.GetValue<string>("TopicName"));
        order = new OrderModel();
    }
}